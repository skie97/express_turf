"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// index.js
var _clone = require('@turf/clone');
var _center = require('@turf/center');
var _centroid = require('@turf/centroid');
var _bbox = require('@turf/bbox');
var _rhumbbearing = require('@turf/rhumb-bearing');
var _rhumbdistance = require('@turf/rhumb-distance');
var _rhumbdestination = require('@turf/rhumb-destination');
var _meta = require('@turf/meta');
var _helpers = require('@turf/helpers');
var _invariant = require('@turf/invariant');
function transformScale(geojson, factor, options) {
  options = options || {};
  if (!_helpers.isObject.call(void 0, options))
    throw new Error("options is invalid");
  var origin = options.origin;
  var mutate = options.mutate;
  if (!geojson)
    throw new Error("geojson required");
  if (typeof factor !== "number" || factor <= 0)
    throw new Error("invalid factor");
  var originIsPoint = Array.isArray(origin) || typeof origin === "object";
  if (mutate !== true)
    geojson = _clone.clone.call(void 0, geojson);
  if (geojson.type === "FeatureCollection" && !originIsPoint) {
    _meta.featureEach.call(void 0, geojson, function(feature, index) {
      geojson.features[index] = scale(feature, factor, origin);
    });
    return geojson;
  }
  return scale(geojson, factor, origin);
}
__name(transformScale, "transformScale");
function scale(feature, factor, origin) {
  var isPoint = _invariant.getType.call(void 0, feature) === "Point";
  origin = defineOrigin(feature, origin);
  if (factor === 1 || isPoint)
    return feature;
  _meta.coordEach.call(void 0, feature, function(coord) {
    var originalDistance = _rhumbdistance.rhumbDistance.call(void 0, origin, coord);
    var bearing = _rhumbbearing.rhumbBearing.call(void 0, origin, coord);
    var newDistance = originalDistance * factor;
    var newCoord = _invariant.getCoords.call(void 0, _rhumbdestination.rhumbDestination.call(void 0, origin, newDistance, bearing));
    coord[0] = newCoord[0];
    coord[1] = newCoord[1];
    if (coord.length === 3)
      coord[2] *= factor;
  });
  delete feature.bbox;
  return feature;
}
__name(scale, "scale");
function defineOrigin(geojson, origin) {
  if (origin === void 0 || origin === null)
    origin = "centroid";
  if (Array.isArray(origin) || typeof origin === "object")
    return _invariant.getCoord.call(void 0, origin);
  var bbox = geojson.bbox ? geojson.bbox : _bbox.bbox.call(void 0, geojson, { recalculate: true });
  var west = bbox[0];
  var south = bbox[1];
  var east = bbox[2];
  var north = bbox[3];
  switch (origin) {
    case "sw":
    case "southwest":
    case "westsouth":
    case "bottomleft":
      return _helpers.point.call(void 0, [west, south]);
    case "se":
    case "southeast":
    case "eastsouth":
    case "bottomright":
      return _helpers.point.call(void 0, [east, south]);
    case "nw":
    case "northwest":
    case "westnorth":
    case "topleft":
      return _helpers.point.call(void 0, [west, north]);
    case "ne":
    case "northeast":
    case "eastnorth":
    case "topright":
      return _helpers.point.call(void 0, [east, north]);
    case "center":
      return _center.center.call(void 0, geojson);
    case void 0:
    case null:
    case "centroid":
      return _centroid.centroid.call(void 0, geojson);
    default:
      throw new Error("invalid origin");
  }
}
__name(defineOrigin, "defineOrigin");
var turf_transform_scale_default = transformScale;



exports.default = turf_transform_scale_default; exports.transformScale = transformScale;
//# sourceMappingURL=index.cjs.map