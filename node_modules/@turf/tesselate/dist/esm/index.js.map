{"version":3,"sources":["../../index.js"],"sourcesContent":["import earcut from \"earcut\";\nimport { polygon } from \"@turf/helpers\";\n\n/**\n * Tesselates a {@link Feature<Polygon>} into a {@link FeatureCollection<Polygon>} of triangles\n * using [earcut](https://github.com/mapbox/earcut).\n *\n * @name tesselate\n * @param {Feature<Polygon>} poly the polygon to tesselate\n * @returns {FeatureCollection<Polygon>} a geometrycollection feature\n * @example\n * var poly = turf.polygon([[[11, 0], [22, 4], [31, 0], [31, 11], [21, 15], [11, 11], [11, 0]]]);\n * var triangles = turf.tesselate(poly);\n *\n * //addToMap\n * var addToMap = [poly, triangles]\n */\nfunction tesselate(poly) {\n  if (\n    !poly.geometry ||\n    (poly.geometry.type !== \"Polygon\" && poly.geometry.type !== \"MultiPolygon\")\n  ) {\n    throw new Error(\"input must be a Polygon or MultiPolygon\");\n  }\n\n  var fc = { type: \"FeatureCollection\", features: [] };\n\n  if (poly.geometry.type === \"Polygon\") {\n    fc.features = processPolygon(poly.geometry.coordinates);\n  } else {\n    poly.geometry.coordinates.forEach(function (coordinates) {\n      fc.features = fc.features.concat(processPolygon(coordinates));\n    });\n  }\n\n  return fc;\n}\n\nfunction processPolygon(coordinates) {\n  var data = flattenCoords(coordinates);\n  var dim = 2;\n  var result = earcut(data.vertices, data.holes, dim);\n\n  var features = [];\n  var vertices = [];\n\n  result.forEach(function (vert, i) {\n    var index = result[i];\n    vertices.push([data.vertices[index * dim], data.vertices[index * dim + 1]]);\n  });\n\n  for (var i = 0; i < vertices.length; i += 3) {\n    var coords = vertices.slice(i, i + 3);\n    coords.push(vertices[i]);\n    features.push(polygon([coords]));\n  }\n\n  return features;\n}\n\nfunction flattenCoords(data) {\n  var dim = data[0][0].length,\n    result = { vertices: [], holes: [], dimensions: dim },\n    holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n    }\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n}\n\nexport { tesselate };\nexport default tesselate;\n"],"mappings":";;;;AAAA,OAAO,YAAY;AACnB,SAAS,eAAe;AAgBxB,SAAS,UAAU,MAAM;AACvB,MACE,CAAC,KAAK,YACL,KAAK,SAAS,SAAS,aAAa,KAAK,SAAS,SAAS,gBAC5D;AACA,UAAM,IAAI,MAAM,yCAAyC;AAAA,EAC3D;AAEA,MAAI,KAAK,EAAE,MAAM,qBAAqB,UAAU,CAAC,EAAE;AAEnD,MAAI,KAAK,SAAS,SAAS,WAAW;AACpC,OAAG,WAAW,eAAe,KAAK,SAAS,WAAW;AAAA,EACxD,OAAO;AACL,SAAK,SAAS,YAAY,QAAQ,SAAU,aAAa;AACvD,SAAG,WAAW,GAAG,SAAS,OAAO,eAAe,WAAW,CAAC;AAAA,IAC9D,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAnBS;AAqBT,SAAS,eAAe,aAAa;AACnC,MAAI,OAAO,cAAc,WAAW;AACpC,MAAI,MAAM;AACV,MAAI,SAAS,OAAO,KAAK,UAAU,KAAK,OAAO,GAAG;AAElD,MAAI,WAAW,CAAC;AAChB,MAAI,WAAW,CAAC;AAEhB,SAAO,QAAQ,SAAU,MAAMA,IAAG;AAChC,QAAI,QAAQ,OAAOA,EAAC;AACpB,aAAS,KAAK,CAAC,KAAK,SAAS,QAAQ,GAAG,GAAG,KAAK,SAAS,QAAQ,MAAM,CAAC,CAAC,CAAC;AAAA,EAC5E,CAAC;AAED,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,QAAI,SAAS,SAAS,MAAM,GAAG,IAAI,CAAC;AACpC,WAAO,KAAK,SAAS,CAAC,CAAC;AACvB,aAAS,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC;AAAA,EACjC;AAEA,SAAO;AACT;AApBS;AAsBT,SAAS,cAAc,MAAM;AAC3B,MAAI,MAAM,KAAK,CAAC,EAAE,CAAC,EAAE,QACnB,SAAS,EAAE,UAAU,CAAC,GAAG,OAAO,CAAC,GAAG,YAAY,IAAI,GACpD,YAAY;AAEd,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,CAAC,EAAE,QAAQ,KAAK;AACvC,eAAS,IAAI,GAAG,IAAI,KAAK;AAAK,eAAO,SAAS,KAAK,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAAA,IAClE;AACA,QAAI,IAAI,GAAG;AACT,mBAAa,KAAK,IAAI,CAAC,EAAE;AACzB,aAAO,MAAM,KAAK,SAAS;AAAA,IAC7B;AAAA,EACF;AAEA,SAAO;AACT;AAhBS;AAmBT,IAAO,yBAAQ;","names":["i"]}