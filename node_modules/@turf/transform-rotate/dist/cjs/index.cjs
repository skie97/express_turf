"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// index.js
var _centroid = require('@turf/centroid');
var _rhumbbearing = require('@turf/rhumb-bearing');
var _rhumbdistance = require('@turf/rhumb-distance');
var _rhumbdestination = require('@turf/rhumb-destination');
var _clone = require('@turf/clone');
var _meta = require('@turf/meta');
var _invariant = require('@turf/invariant');
var _helpers = require('@turf/helpers');
function transformRotate(geojson, angle, options) {
  options = options || {};
  if (!_helpers.isObject.call(void 0, options))
    throw new Error("options is invalid");
  var pivot = options.pivot;
  var mutate = options.mutate;
  if (!geojson)
    throw new Error("geojson is required");
  if (angle === void 0 || angle === null || isNaN(angle))
    throw new Error("angle is required");
  if (angle === 0)
    return geojson;
  if (!pivot)
    pivot = _centroid.centroid.call(void 0, geojson);
  if (mutate === false || mutate === void 0)
    geojson = _clone.clone.call(void 0, geojson);
  _meta.coordEach.call(void 0, geojson, function(pointCoords) {
    var initialAngle = _rhumbbearing.rhumbBearing.call(void 0, pivot, pointCoords);
    var finalAngle = initialAngle + angle;
    var distance = _rhumbdistance.rhumbDistance.call(void 0, pivot, pointCoords);
    var newCoords = _invariant.getCoords.call(void 0, _rhumbdestination.rhumbDestination.call(void 0, pivot, distance, finalAngle));
    pointCoords[0] = newCoords[0];
    pointCoords[1] = newCoords[1];
  });
  return geojson;
}
__name(transformRotate, "transformRotate");
var turf_transform_rotate_default = transformRotate;



exports.default = turf_transform_rotate_default; exports.transformRotate = transformRotate;
//# sourceMappingURL=index.cjs.map