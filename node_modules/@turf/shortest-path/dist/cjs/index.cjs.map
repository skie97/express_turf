{"version":3,"sources":["../../index.ts","../../lib/javascript-astar.js"],"names":[],"mappings":"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","sourcesContent":["import {\n  Polygon,\n  Feature,\n  FeatureCollection,\n  LineString,\n  Geometry,\n  Point,\n} from \"geojson\";\nimport { bbox } from \"@turf/bbox\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { distance } from \"@turf/distance\";\nimport { transformScale as scale } from \"@turf/transform-scale\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { bboxPolygon } from \"@turf/bbox-polygon\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\nimport {\n  Coord,\n  Units,\n  point,\n  isNumber,\n  lineString,\n  isObject,\n  featureCollection,\n  feature,\n} from \"@turf/helpers\";\nimport { Graph, GridNode, astar } from \"./lib/javascript-astar.js\";\n\n/**\n * Returns the shortest {@link LineString|path} from {@link Point|start} to {@link Point|end} without colliding with\n * any {@link Feature} in {@link FeatureCollection<Polygon>| obstacles}\n *\n * @name shortestPath\n * @param {Coord} start point\n * @param {Coord} end point\n * @param {Object} [options={}] optional parameters\n * @param {Geometry|Feature|FeatureCollection<Polygon>} [options.obstacles] areas which path cannot travel\n * @param {string} [options.units='kilometers'] unit in which resolution & minimum distance will be expressed in; it can be degrees, radians, miles, kilometers, ...\n * @param {number} [options.resolution=100] distance between matrix points on which the path will be calculated\n * @returns {Feature<LineString>} shortest path between start and end\n * @example\n * var start = [-5, -6];\n * var end = [9, -6];\n * var options = {\n *   obstacles: turf.polygon([[[0, -7], [5, -7], [5, -3], [0, -3], [0, -7]]])\n * };\n *\n * var path = turf.shortestPath(start, end, options);\n *\n * //addToMap\n * var addToMap = [start, end, options.obstacles, path];\n */\nfunction shortestPath(\n  start: Coord,\n  end: Coord,\n  options: {\n    obstacles?: Polygon | Feature<Polygon> | FeatureCollection<Polygon>;\n    units?: Units;\n    resolution?: number;\n  } = {}\n): Feature<LineString> {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  let obstacles = options.obstacles || featureCollection([]);\n  let resolution = options.resolution || 100;\n\n  // validation\n  if (!start) throw new Error(\"start is required\");\n  if (!end) throw new Error(\"end is required\");\n  if (resolution && (!isNumber(resolution) || resolution <= 0))\n    throw new Error(\"options.resolution must be a number, greater than 0\");\n\n  // Normalize Inputs\n  const startCoord = getCoord(start);\n  const endCoord = getCoord(end);\n  start = point(startCoord);\n  end = point(endCoord);\n\n  // Handle obstacles\n  if (obstacles.type === \"FeatureCollection\") {\n    if (obstacles.features.length === 0) {\n      return lineString([startCoord, endCoord]);\n    }\n  } else if (obstacles.type === \"Polygon\") {\n    obstacles = featureCollection([feature(getGeom(obstacles))]);\n  } else {\n    throw new Error(\"invalid obstacles\");\n  }\n\n  // define path grid area\n  const collection: FeatureCollection<Geometry> = obstacles;\n  collection.features.push(start);\n  collection.features.push(end);\n  const box = bbox(scale(bboxPolygon(bbox(collection)), 1.15)); // extend 15%\n  const [west, south, east, north] = box;\n\n  const width = distance([west, south], [east, south], options);\n  const division = width / resolution;\n\n  collection.features.pop();\n  collection.features.pop();\n\n  const xFraction = division / distance([west, south], [east, south], options);\n  const cellWidth = xFraction * (east - west);\n  const yFraction = division / distance([west, south], [west, north], options);\n  const cellHeight = yFraction * (north - south);\n\n  const bboxHorizontalSide = east - west;\n  const bboxVerticalSide = north - south;\n  const columns = Math.floor(bboxHorizontalSide / cellWidth);\n  const rows = Math.floor(bboxVerticalSide / cellHeight);\n  // adjust origin of the grid\n  const deltaX = (bboxHorizontalSide - columns * cellWidth) / 2;\n  const deltaY = (bboxVerticalSide - rows * cellHeight) / 2;\n\n  // loop through points only once to speed up process\n  // define matrix grid for A-star algorithm\n  const pointMatrix: string[][] = [];\n  const matrix: number[][] = [];\n\n  let closestToStart: GridNode;\n  let closestToEnd: GridNode;\n  let minDistStart = Infinity;\n  let minDistEnd = Infinity;\n  let currentY = north - deltaY;\n  let r = 0;\n  while (currentY >= south) {\n    // var currentY = south + deltaY;\n    const matrixRow = [];\n    const pointMatrixRow = [];\n    let currentX = west + deltaX;\n    let c = 0;\n    while (currentX <= east) {\n      const pt = point([currentX, currentY]);\n      const isInsideObstacle = isInside(pt, obstacles);\n      // feed obstacles matrix\n      matrixRow.push(isInsideObstacle ? 0 : 1); // with javascript-astar\n      // matrixRow.push(isInsideObstacle ? 1 : 0); // with astar-andrea\n      // map point's coords\n      pointMatrixRow.push(currentX + \"|\" + currentY);\n      // set closest points\n      const distStart = distance(pt, start);\n      // if (distStart < minDistStart) {\n      if (!isInsideObstacle && distStart < minDistStart) {\n        minDistStart = distStart;\n        closestToStart = { x: c, y: r };\n      }\n      const distEnd = distance(pt, end);\n      // if (distEnd < minDistEnd) {\n      if (!isInsideObstacle && distEnd < minDistEnd) {\n        minDistEnd = distEnd;\n        closestToEnd = { x: c, y: r };\n      }\n      currentX += cellWidth;\n      c++;\n    }\n    matrix.push(matrixRow);\n    pointMatrix.push(pointMatrixRow);\n    currentY -= cellHeight;\n    r++;\n  }\n\n  // find path on matrix grid\n\n  // javascript-astar ----------------------\n  const graph = new Graph(matrix, { diagonal: true });\n  const startOnMatrix = graph.grid[closestToStart!.y][closestToStart!.x];\n  const endOnMatrix = graph.grid[closestToEnd!.y][closestToEnd!.x];\n  const result: GridNode[] = astar.search(graph, startOnMatrix, endOnMatrix);\n\n  const path = [startCoord];\n  result.forEach(function (coord) {\n    const coords = pointMatrix[coord.x][coord.y].split(\"|\");\n    path.push([+coords[0], +coords[1]]); // make sure coords are numbers\n  });\n  path.push(endCoord);\n  // ---------------------------------------\n\n  // astar-andrea ------------------------\n  // var result = aStar(matrix, [closestToStart.x, closestToStart.y], [closestToEnd.x, closestToEnd.y], 'DiagonalFree');\n  // var path = [start.geometry.coordinates];\n  // result.forEach(function (coord) {\n  //     var coords = pointMatrix[coord[1]][coord[0]].split('|');\n  //     path.push([+coords[0], +coords[1]]); // make sure coords are numbers\n  // });\n  // path.push(end.geometry.coordinates);\n  // ---------------------------------------\n\n  return cleanCoords(lineString(path));\n}\n\n/**\n * Checks if Point is inside any of the Polygons\n *\n * @private\n * @param {Feature<Point>} pt to check\n * @param {FeatureCollection<Polygon>} polygons features\n * @returns {boolean} if inside or not\n */\nfunction isInside(pt: Feature<Point>, polygons: FeatureCollection<Polygon>) {\n  for (let i = 0; i < polygons.features.length; i++) {\n    if (booleanPointInPolygon(pt, polygons.features[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport { shortestPath };\nexport default shortestPath;\n","// javascript-astar 0.4.1\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n\nfunction pathTo(node) {\n  var curr = node,\n    path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function (node) {\n    return node.f;\n  });\n}\n\n/**\n * Astar\n * @private\n */\nexport var astar = {\n  /**\n   * Perform an A* Search on a graph given a start and end node.\n   *\n   * @private\n   * @memberof astar\n   * @param {Graph} graph Graph\n   * @param {GridNode} start Start\n   * @param {GridNode} end End\n   * @param {Object} [options] Options\n   * @param {bool} [options.closest] Specifies whether to return the path to the closest node if the target is unreachable.\n   * @param {Function} [options.heuristic] Heuristic function (see astar.heuristics).\n   * @returns {Object} Search\n   */\n  search: function (graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan,\n      closest = options.closest ?? false;\n\n    var openHeap = getHeap(),\n      closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode),\n          beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (\n              neighbor.h < closestNode.h ||\n              (neighbor.h === closestNode.h && neighbor.g < closestNode.g)\n            ) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function (pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function (pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return D * (d1 + d2) + (D2 - 2 * D) * Math.min(d1, d2);\n    },\n  },\n  cleanNode: function (node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  },\n};\n\n/**\n * A graph memory structure\n *\n * @private\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options] Options\n * @param {boolean} [options.diagonal] Specifies whether diagonal moves are allowed\n * @returns {void} Graph\n */\nexport function Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function () {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function () {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function (node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function (node) {\n  var ret = [],\n    x = node.x,\n    y = node.y,\n    grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function () {\n  var graphString = [],\n    nodes = this.grid, // when using grid\n    rowDebug,\n    row,\n    y,\n    l;\n  for (var x = 0, len = nodes.length; x < len; x++) {\n    rowDebug = [];\n    row = nodes[x];\n    for (y = 0, l = row.length; y < l; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function () {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function (fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function () {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function () {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function (node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function () {\n    return this.content.length;\n  },\n  rescoreElement: function (node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function (n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1,\n        parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n        // Found a parent that is less, no need to sink any further.\n      } else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function (n) {\n    // Look up the target element and its score.\n    var length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null,\n        child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n        // Otherwise, we are done.\n      } else {\n        break;\n      }\n    }\n  },\n};\n"]}