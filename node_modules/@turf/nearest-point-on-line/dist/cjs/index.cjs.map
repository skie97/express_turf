{"version":3,"sources":["../../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB,sBAAsB;AAChD,SAAS,mBAAmB;AAC5B,SAAS,OAAO,kBAAgC;AAChD,SAAS,iBAAiB;AA4B1B,SAAS,mBACP,OACA,IACA,UAA6B,CAAC,GAS9B;AACA,MAAI,CAAC,SAAS,CAAC,IAAI;AACjB,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACvD;AAEA,MAAI,YAGA,MAAM,CAAC,UAAU,QAAQ,GAAG;AAAA,IAC9B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,EACZ,CAAC;AAED,MAAI,SAAS;AACb,cAAY,OAAO,SAAU,MAAW;AACtC,UAAM,SAAc,UAAU,IAAI;AAElC,aAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,KAAK;AAE1C,YAAM,QAA0C,MAAM,OAAO,CAAC,CAAC;AAC/D,YAAM,WAAW,OAAO,SAAS,IAAI,OAAO,OAAO;AAEnD,YAAM,OAAyC,MAAM,OAAO,IAAI,CAAC,CAAC;AAClE,WAAK,WAAW,OAAO,SAAS,IAAI,MAAM,OAAO;AAEjD,YAAM,gBAAgB,SAAS,OAAO,MAAM,OAAO;AAEnD,YAAM,iBAAiB,KAAK;AAAA,QAC1B,MAAM,WAAW;AAAA,QACjB,KAAK,WAAW;AAAA,MAClB;AACA,YAAM,YAAY,QAAQ,OAAO,IAAI;AACrC,YAAM,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACF;AACA,YAAM,mBAAmB;AAAA,QACvB;AAAA,QACA;AAAA,QACA,YAAY;AAAA,QACZ;AAAA,MACF;AACA,YAAM,YAAY;AAAA,QAChB,WAAW;AAAA,UACT,iBAAiB,SAAS;AAAA,UAC1B,iBAAiB,SAAS;AAAA,QAC5B,CAAC;AAAA,QACD,WAAW,CAAC,MAAM,SAAS,aAAa,KAAK,SAAS,WAAW,CAAC;AAAA,MACpE;AACA,UAAI;AAIJ,UAAI,UAAU,SAAS,SAAS,KAAK,UAAU,SAAS,CAAC,GAAG;AAC1D,sBAAc,iCACT,UAAU,SAAS,CAAC,IADX;AAAA,UAEZ,YAAY;AAAA,YACV,MAAM,SAAS,IAAI,UAAU,SAAS,CAAC,GAAG,OAAO;AAAA,YACjD,UAAU,SAAS,SAAS,OAAO,UAAU,SAAS,CAAC,GAAG,OAAO;AAAA,UACnE;AAAA,QACF;AAAA,MACF;AAEA,UAAI,MAAM,WAAW,OAAO,UAAU,WAAW,MAAM;AACrD,oBAAY,iCACP,QADO;AAAA,UAEV,YAAY,iCAAK,MAAM,aAAX,EAAuB,OAAO,GAAG,UAAU,OAAO;AAAA,QAChE;AAAA,MACF;AAEA,UAAI,KAAK,WAAW,OAAO,UAAU,WAAW,MAAM;AACpD,oBAAY,iCACP,OADO;AAAA,UAEV,YAAY,iCACP,KAAK,aADE;AAAA,YAEV,OAAO,IAAI;AAAA,YACX,UAAU,SAAS;AAAA,UACrB;AAAA,QACF;AAAA,MACF;AAEA,UACE,eACA,YAAY,WAAW,OAAO,UAAU,WAAW,MACnD;AACA,oBAAY,iCACP,cADO;AAAA,UAEV,YAAY,iCAAK,YAAY,aAAjB,EAA6B,OAAO,EAAE;AAAA,QACpD;AAAA,MACF;AAEA,gBAAU;AAAA,IACZ;AAAA,EACF,CAAC;AAED,SAAO;AACT;AA/GS;AAkHT,IAAO,qCAAQ","sourcesContent":["import { Feature, Point, LineString, MultiLineString } from \"geojson\";\nimport { bearing } from \"@turf/bearing\";\nimport { distance } from \"@turf/distance\";\nimport { destination } from \"@turf/destination\";\nimport { lineIntersect as lineIntersects } from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport { point, lineString, Coord, Units } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\n\n/**\n * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.\n *\n * @name nearestPointOnLine\n * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to\n * @param {Geometry|Feature<Point>|number[]} pt point to snap from\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.\n * @example\n * var line = turf.lineString([\n *     [-77.031669, 38.878605],\n *     [-77.029609, 38.881946],\n *     [-77.020339, 38.884084],\n *     [-77.025661, 38.885821],\n *     [-77.021884, 38.889563],\n *     [-77.019824, 38.892368]\n * ]);\n * var pt = turf.point([-77.037076, 38.884017]);\n *\n * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line, pt, snapped];\n * snapped.properties['marker-color'] = '#00f';\n */\nfunction nearestPointOnLine<G extends LineString | MultiLineString>(\n  lines: Feature<G> | G,\n  pt: Coord,\n  options: { units?: Units } = {}\n): Feature<\n  Point,\n  {\n    dist: number;\n    index: number;\n    location: number;\n    [key: string]: any;\n  }\n> {\n  if (!lines || !pt) {\n    throw new Error(\"lines and pt are required arguments\");\n  }\n\n  let closestPt: Feature<\n    Point,\n    { dist: number; index: number; location: number }\n  > = point([Infinity, Infinity], {\n    dist: Infinity,\n    index: -1,\n    location: -1,\n  });\n\n  let length = 0.0;\n  flattenEach(lines, function (line: any) {\n    const coords: any = getCoords(line);\n\n    for (let i = 0; i < coords.length - 1; i++) {\n      //start\n      const start: Feature<Point, { dist: number }> = point(coords[i]);\n      start.properties.dist = distance(pt, start, options);\n      //stop\n      const stop: Feature<Point, { dist: number }> = point(coords[i + 1]);\n      stop.properties.dist = distance(pt, stop, options);\n      // sectionLength\n      const sectionLength = distance(start, stop, options);\n      //perpendicular\n      const heightDistance = Math.max(\n        start.properties.dist,\n        stop.properties.dist\n      );\n      const direction = bearing(start, stop);\n      const perpendicularPt1 = destination(\n        pt,\n        heightDistance,\n        direction + 90,\n        options\n      );\n      const perpendicularPt2 = destination(\n        pt,\n        heightDistance,\n        direction - 90,\n        options\n      );\n      const intersect = lineIntersects(\n        lineString([\n          perpendicularPt1.geometry.coordinates,\n          perpendicularPt2.geometry.coordinates,\n        ]),\n        lineString([start.geometry.coordinates, stop.geometry.coordinates])\n      );\n      let intersectPt:\n        | Feature<Point, { dist: number; location: number }>\n        | undefined;\n\n      if (intersect.features.length > 0 && intersect.features[0]) {\n        intersectPt = {\n          ...intersect.features[0],\n          properties: {\n            dist: distance(pt, intersect.features[0], options),\n            location: length + distance(start, intersect.features[0], options),\n          },\n        };\n      }\n\n      if (start.properties.dist < closestPt.properties.dist) {\n        closestPt = {\n          ...start,\n          properties: { ...start.properties, index: i, location: length },\n        };\n      }\n\n      if (stop.properties.dist < closestPt.properties.dist) {\n        closestPt = {\n          ...stop,\n          properties: {\n            ...stop.properties,\n            index: i + 1,\n            location: length + sectionLength,\n          },\n        };\n      }\n\n      if (\n        intersectPt &&\n        intersectPt.properties.dist < closestPt.properties.dist\n      ) {\n        closestPt = {\n          ...intersectPt,\n          properties: { ...intersectPt.properties, index: i },\n        };\n      }\n      // update length\n      length += sectionLength;\n    }\n  });\n\n  return closestPt;\n}\n\nexport { nearestPointOnLine };\nexport default nearestPointOnLine;\n"]}